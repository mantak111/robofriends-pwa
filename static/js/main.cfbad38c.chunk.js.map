{"version":3,"sources":["components/CounterButton.jsx","components/Header.jsx","components/Card.jsx","components/CardList.jsx","components/SearchBox.jsx","components/Scroll.jsx","components/ErrorBoundary.jsx","containers/App.jsx","actions.js","constants.js","reducers.js","index.js"],"names":["CounterButton","updateCount","setState","state","count","nextProps","nextState","this","console","log","color","props","onClick","Component","Header","className","Card","alt","src","id","name","email","CardList","robots","map","robot","key","username","SearchBox","searchChange","onChange","type","placeholder","Scroll","style","overflowY","border","height","children","ErrorBoundary","hasError","error","info","App","componentDidMount","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cfbad38c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass CounterButton extends Component {\n  constructor() {\n    super();\n    this.state = {\n      count: 0\n    };\n  }\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.count !== nextState.count) return true;\n    return false;\n  }\n\n  updateCount = () => {\n    this.setState(state => {\n      return {\n        count: this.state.count + 1\n      };\n    });\n  };\n\n  render() {\n    console.log(\"CounterButton\");\n    return (\n      <button color={this.props.color} onClick={this.updateCount}>\n        Count: {this.state.count}\n      </button>\n    );\n  }\n}\n\nexport default CounterButton;\n","import React, { Component } from \"react\";\nimport CounterButton from \"./CounterButton\";\n\nclass Header extends Component {\n//   shouldComponentUpdate(nextProps, nextState) {\n//     return false;\n//   }\n\n  render() {\n    console.log(\"Header\");\n    return (\n      <div>\n        <h1 className=\"f1\">RoboFriends</h1>\n        <CounterButton color={\"red\"} />\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React from \"react\";\n\nconst Card = (props) => {\n  return (\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img alt=\"robots\" src={`https://robohash.org/${props.id}?size=200x200`} />\n      <div>\n        <h2>{props.name}</h2>\n        <p>{props.email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n  console.log(\"CardList\");\n  return (\n    <div>\n      {robots.map(robot => (\n        <Card\n          key={robot.id}\n          id={robot.id}\n          name={robot.name}\n          username={robot.username}\n          email={robot.email}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({ searchChange }) => {\n  console.log(\"SearchBox\");\n  return (\n    <div className=\"pa2\">\n      <input\n        onChange={searchChange}\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"search robots\"\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\n\nconst Scroll = (props) => {\n  return (\n      <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\n          {props.children}\n      </div>\n  )\n};\n\nexport default Scroll;\n","import React, { Component } from \"react\";\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    };\n  }\n\n  componenDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oooops. That is not good.</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Header from \"../components/Header\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundary from \"../components/ErrorBoundary\";\nimport \"./App.css\";\n\nimport { setSearchField, requestRobots } from \"../actions\";\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending.isPending,\n    error: state.requestRobots.error\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  };\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      robots: []\n    };\n  }\n\n  componentDidMount = () => {\n    this.props.onRequestRobots();\n  };\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    return isPending ? (\n      <h1>Loading</h1>\n    ) : (\n      <div className=\"tc\">\n        <Header />\n        <SearchBox searchChange={onSearchChange} />\n        <Scroll>\n          <ErrorBoundary>\n            <CardList robots={filteredRobots} />\n          </ErrorBoundary>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from \"./constants.js\";\n\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\n\nexport const requestRobots = () => dispatch => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\n};\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from \"./constants.js\";\n\nconst initialStateSearch = {\n  searchField: \"\"\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload });\n    default:\n      return state;\n  }\n};\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n}\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {\n        robots: action.payload,\n        isPending: false\n      });\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {\n        error: action.payload,\n        isPending: false\n      });\n    default:\n      return state;\n  }\n};","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport { searchRobots, requestRobots } from \"./reducers\";\nimport \"tachyons\";\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}