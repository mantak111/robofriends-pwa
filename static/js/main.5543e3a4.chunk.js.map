{"version":3,"sources":["components/CounterButton.jsx","components/Header.jsx","components/Card.jsx","components/CardList.jsx","components/SearchBox.jsx","components/Scroll.jsx","components/ErrorBoundary.jsx","containers/App.jsx","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["CounterButton","updateCount","setState","state","count","nextProps","nextState","this","console","log","color","props","onClick","Component","Header","className","Card","alt","src","id","name","email","CardList","robots","map","robot","key","username","SearchBox","searchChange","aria-label","onChange","type","placeholder","Scroll","style","overflowY","border","height","children","ErrorBoundary","hasError","error","info","App","componentDidMount","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5543e3a4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass CounterButton extends Component {\n  constructor() {\n    super();\n    this.state = {\n      count: 0\n    };\n  }\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.count !== nextState.count) return true;\n    return false;\n  }\n\n  updateCount = () => {\n    this.setState(state => {\n      return {\n        count: this.state.count + 1\n      };\n    });\n  };\n\n  render() {\n    console.log(\"CounterButton\");\n    return (\n      <button color={this.props.color} onClick={this.updateCount}>\n        Count: {this.state.count}\n      </button>\n    );\n  }\n}\n\nexport default CounterButton;\n","import React, { Component } from \"react\";\nimport CounterButton from \"./CounterButton\";\n\nclass Header extends Component {\n//   shouldComponentUpdate(nextProps, nextState) {\n//     return false;\n//   }\n\n  render() {\n    console.log(\"Header\");\n    return (\n      <div>\n        <h1 className=\"f1\">RoboFriends</h1>\n        <CounterButton color={\"red\"} />\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React from \"react\";\n\nconst Card = (props) => {\n  return (\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img alt=\"robots\" src={`https://robohash.org/${props.id}?size=200x200`} />\n      <div>\n        <h2>{props.name}</h2>\n        <p>{props.email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n  console.log(\"CardList\");\n  return (\n    <div>\n      {robots.map(robot => (\n        <Card\n          key={robot.id}\n          id={robot.id}\n          name={robot.name}\n          username={robot.username}\n          email={robot.email}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({ searchChange }) => {\n  console.log(\"SearchBox\");\n  return (\n    <div className=\"pa2\">\n      <input\n        aria-label=\"Search Robots\"\n        onChange={searchChange}\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"search robots\"\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\n\nconst Scroll = (props) => {\n  return (\n      <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\n          {props.children}\n      </div>\n  )\n};\n\nexport default Scroll;\n","import React, { Component } from \"react\";\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    };\n  }\n\n  componenDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oooops. That is not good.</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Header from \"../components/Header\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundary from \"../components/ErrorBoundary\";\nimport \"./App.css\";\n\nimport { setSearchField, requestRobots } from \"../actions\";\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending.isPending,\n    error: state.requestRobots.error\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  };\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      robots: []\n    };\n  }\n\n  componentDidMount = () => {\n    this.props.onRequestRobots();\n  };\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    return isPending ? (\n      <h1>Loading</h1>\n    ) : (\n      <div className=\"tc\">\n        <Header />\n        <SearchBox searchChange={onSearchChange} />\n        <Scroll>\n          <ErrorBoundary>\n            <CardList robots={filteredRobots} />\n          </ErrorBoundary>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from \"./constants.js\";\n\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\n\nexport const requestRobots = () => dispatch => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\n};\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from \"./constants.js\";\n\nconst initialStateSearch = {\n  searchField: \"\"\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload });\n    default:\n      return state;\n  }\n};\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n}\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {\n        robots: action.payload,\n        isPending: false\n      });\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {\n        error: action.payload,\n        isPending: false\n      });\n    default:\n      return state;\n  }\n};","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from \"./reducers\";\nimport \"tachyons\";\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}